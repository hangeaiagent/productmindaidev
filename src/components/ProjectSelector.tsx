import React, { useState, useEffect } from 'react';
import { Plus, FolderOpen, Loader, Save, Download } from 'lucide-react';
import { useAppContext } from '../context/AppContext'; 
import { supabase } from '../lib/supabase';
import { useAuth } from '../context/AuthContext';
import { useSearchParams } from 'react-router-dom';
import { logger } from '../utils/logger';
import JSZip from 'jszip';
import * as marked from 'marked';
import type { Project, TemplateVersion } from '../types';
import { Document, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, WidthType, BorderStyle, Packer, AlignmentType } from 'docx';
import html2canvas from 'html2canvas';
import { jsPDF } from 'jspdf';

// 转换 Markdown 为 Word 文档
const convertMarkdownToDocx = async (markdown: string): Promise<Document> => {
  try {
    logger.log('开始转换Markdown为Word', { contentLength: markdown.length });
    
    // 将 Markdown 转换为 HTML
    const htmlContent = String(marked.parse(markdown));
    logger.log('Markdown转换为HTML完成', { htmlLength: htmlContent.length });

    // 将 HTML 转换为文档段落
    const paragraphs = htmlContent
      .split('\n')
      .filter((line: string) => line.trim())
      .map((line: string) => {
        return new Paragraph({
          children: [
            new TextRun({
              text: line.replace(/<[^>]*>/g, ''), // 移除HTML标签
              size: 24,
            }),
          ],
        });
      });

    logger.log('HTML转换为段落完成', { paragraphsCount: paragraphs.length });

    // 创建一个新的文档，正确使用构造函数
    const doc = new Document({
      sections: [{
        properties: {},
        children: paragraphs
      }],
      creator: "ProductMind AI",
      description: "Generated by ProductMind AI",
      title: "ProductMind AI Document"
    });

    logger.log('Word文档创建完成');
    return doc;
  } catch (error) {
    logger.error('转换Markdown到Word失败', { error });
    throw error;
  }
};

interface VersionWithTemplate extends TemplateVersion {
  template?: {
    name_zh?: string;
    name_en?: string;
    category?: {
      name_zh?: string;
      name_en?: string;
    };
  };
}

const ProjectSelector: React.FC = () => {
  const { 
    language, 
    currentProject, 
    setCurrentProject, 
    setSelectedTemplate, 
    setStreamingOutput,
    loadProjectHistory 
  } = useAppContext();
  const { user } = useAuth();
  const [searchParams, setSearchParams] = useSearchParams();
  const projectId = searchParams.get('projectId');
  const [projects, setProjects] = useState<Project[]>([]);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [showDownloadOptions, setShowDownloadOptions] = useState(false);

  useEffect(() => {
    if (user) {
      loadProjects();
    }
  }, [user]);

  useEffect(() => {
    if (projects.length > 0) {
      // 如果URL中有projectId，选择对应项目
      if (projectId) {
        const project = projects.find(p => p.id === projectId);
        if (project) {
          setCurrentProject(project);
          return;
        }
      }
      
      // 否则选择默认项目，如果没有默认项目则选择第一个
      const defaultProject = projects.find(p => p.is_default) || projects[0];
      if (defaultProject) {
        setCurrentProject(defaultProject);
        setSearchParams({ projectId: defaultProject.id });
      }
    }
  }, [projects, projectId]);

  const loadProjects = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      if (!user?.id) {
        setProjects([]);
        return;
      }
      
      const { data, error: fetchError } = await supabase
        .from('user_projects')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (fetchError) {
        throw new Error(language === 'zh' ? 
          '加载项目失败，请检查网络连接' : 
          'Failed to load projects, please check your network connection'
        );
      }
      
      setProjects(data || []);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 
        language === 'zh' ? '加载项目时发生错误' : 'Error loading projects';
      setError(errorMessage);
      console.error('加载项目失败:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleNewProject = () => {
    setCurrentProject({
      id: '',
      name: '',
      description: '',
      user_id: user?.id || '',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    });
  };

  const handleSaveProject = async () => {
    if (!currentProject?.name) {
      setError(language === 'zh' ? '请填写项目名称和描述' : 'Please fill in project name and description');
      return;
    }

    setSaving(true);
    setError(null);

    try {
      const projectData = {
        name: currentProject.name,
        description: currentProject.description || '',
        updated_at: new Date().toISOString()
      };

      if (currentProject.id) {
        const { error: updateError } = await supabase
          .from('user_projects')
          .update(projectData)
          .eq('id', currentProject.id);

        if (updateError) throw updateError;
      } else {
        const { data, error: insertError } = await supabase
          .from('user_projects')
          .insert({
            ...projectData,
            user_id: user?.id
          })
          .select()
          .single();

        if (insertError) throw insertError;
        setCurrentProject(data);
      }
      
      await loadProjects();
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 
        language === 'zh' ? '保存项目失败' : 'Failed to save project';
      setError(errorMessage);
    } finally {
      setSaving(false);
    }
  };

  const handleSetDefault = async (projectId: string) => {
    try {
      logger.log('设置默认项目', { projectId });
      
      const { error: updateError } = await supabase
        .from('user_projects')
        .update({ is_default: true })
        .eq('id', projectId);

      if (updateError) throw updateError;
      
      await loadProjects();
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 
        language === 'zh' ? '设置默认项目失败' : 'Failed to set default project';
      setError(errorMessage);
    }
  };

  // 用于格式化输出内容的函数，与 OutputDisplay 中的逻辑相同
  const formatOutput = (text: string | null | undefined): string => {
    try {
      if (!text) return '';
      let textStr = String(text);
      
      // 检查是否已经是JSON对象
      if (typeof text === 'object') {
        try {
          const content = (text as any).content || text;
          return typeof content === 'string' ? content : JSON.stringify(content, null, 2);
        } catch (e) {
          return String(text);
        }
      }
      
      // 尝试解析JSON字符串
      try {
        if (textStr.trim().startsWith('{') || textStr.trim().startsWith('[')) {
          const jsonData = JSON.parse(textStr);
          if (jsonData.content) {
            return jsonData.content;
          }
          return JSON.stringify(jsonData, null, 2);
        }
      } catch {
        // 如果解析失败，返回原始文本
      }

      return textStr;
    } catch (e) {
      logger.error('格式化输出失败', e);
      return '';
    }
  };
  
  // 动态插入版权信息函数，与 OutputDisplay 中的逻辑相同
  const addCopyrightFooter = (content: string, format: string = 'md'): string => {
    // 根据当前语言选择版权信息
    const copyrightText = language === 'zh' ? 
      '本文件由 [ProductMind AI](https://productmindai.com) 生成' : 
      'Generated by [ProductMind AI](https://productmindai.com)';
    
    let footer = '';
    
    switch (format) {
      case 'md':
        footer = `

---
${copyrightText}
`;
        break;
      case 'docx':
        // Word 文件的版权信息会在后面单独处理
        footer = '';
        break;
      case 'pdf':
        // PDF 文件的版权信息会在后面单独处理
        footer = '';
        break;
      default:
        footer = `

---
${copyrightText}
`;
    }
    
    return content + footer;
  };

  const handleDownloadAll = async (format: 'md') => {
    if (!currentProject?.id) {
      setError(language === 'zh' ? '请先选择或创建一个项目' : 'Please select or create a project first');
      return;
    }

    setIsDownloading(true);
    setError(null);

    try {
      logger.log('开始下载项目内容', { projectId: currentProject.id, format });

      // 获取所有活跃的模板版本
      const { data: versions, error: versionsError } = await supabase
        .from('template_versions')
        .select(`
          *,
          template:templates (
            id,
            name_zh,
            name_en,
            category_id,
            category:template_categories (
              id,
              name_zh,
              name_en
            )
          )
        `)
        .eq('project_id', currentProject.id)
        .eq('is_active', true);

      if (versionsError) throw versionsError;

      if (!versions || versions.length === 0) {
        setError(language === 'zh' ? 
          '当前项目没有可下载的内容' : 
          'No content available to download'
        );
        return;
      }

      // 创建 ZIP 文件
      const zip = new JSZip();
      
      // 添加项目信息文件
      const readmeContent = `# ${currentProject.name || ''}\n\n${currentProject.description || ''}\n\n${language === 'zh' ? '生成时间' : 'Generated at'}：${new Date().toLocaleString()}`;
      zip.file('README.md', readmeContent);
      
      // 按分类组织文件
      const groupedVersions = (versions as VersionWithTemplate[]).reduce<Record<string, VersionWithTemplate[]>>((acc, version) => {
        const categoryName = language === 'zh' ? 
          (version.template?.category?.name_zh || '未分类') : 
          (version.template?.category?.name_en || 'Uncategorized');
        
        if (!acc[categoryName]) {
          acc[categoryName] = [];
        }
        acc[categoryName].push(version);
        return acc;
      }, {});

      // 添加文件到 ZIP
      for (const [category, categoryVersions] of Object.entries(groupedVersions)) {
        const folder = zip.folder(category);
        if (folder) {
          logger.log(`处理分类: ${category}`, { filesCount: categoryVersions.length });
          
          for (const version of categoryVersions) {
            const templateName = language === 'zh' ? 
              (version.template?.name_zh || 'unnamed') : 
              (version.template?.name_en || 'unnamed');
            
            // 使用安全的文件名
            const safeTemplateName = templateName
              .replace(/[<>:"/\\|?*]/g, '')  // 移除不安全的字符
              .replace(/\s+/g, '_');         // 空格替换为下划线
            
            const fileName = `${safeTemplateName}_V${version.version_number}.${format}`;
            logger.log(`处理文件: ${fileName}`, { templateId: version.template_id });
            
            // 格式化内容
            let rawContent = typeof version.output_content === 'string' 
              ? version.output_content 
              : JSON.stringify(version.output_content, null, 2);
            
            const formattedContent = formatOutput(rawContent);
            logger.log('内容格式化完成', { contentLength: formattedContent.length });

            try {
              // 添加Markdown格式的版权信息
              const contentWithFooter = addCopyrightFooter(formattedContent, 'md');
              folder.file(fileName, contentWithFooter);
              logger.log('Markdown文件添加完成', { fileName });
            } catch (fileError) {
              logger.error(`处理文件${fileName}失败`, {
                error: fileError,
                format,
                templateName,
                message: fileError instanceof Error ? fileError.message : '未知错误',
                stack: fileError instanceof Error ? fileError.stack : undefined
              });
              
              // 添加错误信息文件
              const errorContent = `处理此文件时出错: ${fileError instanceof Error ? fileError.message : '未知错误'}\n\n原始内容:\n${formattedContent}`;
              folder.file(`${fileName}.error.txt`, errorContent);
            }
          }
        }
      }

      // 生成并下载 ZIP 文件
      const content = await zip.generateAsync({ type: 'blob' });
      
      // 使用安全的项目名称作为文件名
      const safeProjectName = currentProject.name
        .replace(/[<>:"/\\|?*]/g, '')
        .replace(/\s+/g, '_');
      
      const formatName = format.toUpperCase();
      const downloadUrl = URL.createObjectURL(content);
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = `${safeProjectName}_${formatName}_${new Date().toISOString().slice(0, 10)}.zip`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(downloadUrl);

      logger.log('文件下载完成', { projectName: currentProject.name, format, filesCount: versions.length });
      setShowDownloadOptions(false);
    } catch (err) {
      logger.error('下载失败', { 
        error: err, 
        message: err instanceof Error ? err.message : '未知错误',
        stack: err instanceof Error ? err.stack : undefined 
      });
      const errorMessage = err instanceof Error ? err.message : 
        language === 'zh' ? '下载失败' : 'Download failed';
      setError(errorMessage);
    } finally {
      setIsDownloading(false);
    }
    
    setTimeout(() => {
      setError(null);
    }, 3000);
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6 mb-6">
      <div className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-gray-800">
            {language === 'zh' ? '项目信息' : 'Project Information'}
          </h2>
          <div className="flex space-x-2">
            <button
              onClick={handleNewProject}
              className="px-3 py-1.5 text-sm font-medium text-indigo-600 bg-indigo-50 rounded hover:bg-indigo-100"
            >
              <Plus className="w-4 h-4 inline-block mr-1" />
              {language === 'zh' ? '新建' : 'New'}
            </button>
            <div className="relative">
              <button
                onClick={() => setShowDownloadOptions(!showDownloadOptions)}
                disabled={isDownloading}
                className={`px-3 py-1.5 text-sm font-medium rounded ${
                  isDownloading
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : 'text-indigo-600 bg-indigo-50 hover:bg-indigo-100'
                }`}
              >
                {isDownloading ? (
                  <>
                    <Loader className="w-4 h-4 inline-block mr-1 animate-spin" />
                    {language === 'zh' ? '下载中...' : 'Downloading...'}
                  </>
                ) : (
                  <>
                    <Download className="w-4 h-4 inline-block mr-1" />
                    {language === 'zh' ? '全部下载' : 'Download All'}
                  </>
                )}
              </button>
              
              {showDownloadOptions && !isDownloading && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 z-10">
                  <div className="py-1" role="menu" aria-orientation="vertical">
                    <button
                      onClick={() => handleDownloadAll('md')}
                      className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      role="menuitem"
                    >
                      {language === 'zh' ? '全部下载 Markdown' : 'Download All Markdown'}
                    </button>
                  </div>
                </div>
              )}
            </div>
            <button
              onClick={handleSaveProject}
              disabled={saving || !currentProject?.name}
              className={`px-3 py-1.5 text-sm font-medium rounded ${
                saving || !currentProject?.name
                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  : 'text-white bg-indigo-600 hover:bg-indigo-700'
              }`}
            >
              {saving ? (
                <>
                  <Loader className="w-4 h-4 inline-block mr-1 animate-spin" />
                  {language === 'zh' ? '保存中...' : 'Saving...'}
                </>
              ) : (
                <>
                  <Save className="w-4 h-4 inline-block mr-1" />
                  {language === 'zh' ? '保存' : 'Save'}
                </>
              )}
            </button>
          </div>
        </div>

        {error && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-sm text-red-600">{error}</p>
          </div>
        )}

        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {language === 'zh' ? '项目名称' : 'Project Name'}
            </label>
            <input
              type="text"
              value={currentProject?.name || ''}
              onChange={async (e) => {
                const value = e.target.value;
                setCurrentProject(prev => prev ? {
                  ...prev,
                  name: value
                } : null);
              }}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
              placeholder={language === 'zh' ? '项目名称' : 'Project Name'}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {language === 'zh' ? '产品概述' : 'Product Overview'}
            </label>
            <div className="relative">
              <textarea
                value={currentProject?.description || ''}
                onChange={(e) => {
                  const value = e.target.value;
                  setCurrentProject(prev => prev ? {
                    ...prev,
                    description: value
                  } : null);
                }}
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder={language === 'zh' ? 
                  '请用一句话描述您的产品概念（例如：开发一个帮助用户管理日常任务的应用）' : 
                  'Describe your product concept in one sentence'
                }
                required
              />
              <p className="mt-2 text-sm text-gray-500">
                {language === 'zh'
                  ? '简单描述您的产品理念，我们将帮助您进行深入分析'
                  : 'Briefly describe your product concept, and we will help you analyze it in depth'
                }
              </p>
            </div>
          </div>
        </div>
      </div>

      <div className="mt-8">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          {language === 'zh' ? '我的项目' : 'My Projects'}
        </h3>
        {isLoading ? (
          <div className="flex items-center justify-center py-8">
            <Loader className="w-6 h-6 text-indigo-600 animate-spin" />
            <span className="ml-2 text-gray-600">
              {language === 'zh' ? '加载中...' : 'Loading...'}
            </span>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
            {projects.map((project) => (
              <button
                key={project.id}
                onClick={() => {
                  setCurrentProject(project);
                  setSearchParams({ projectId: project.id });
                  // 清空当前选中的模板和输出内容，加载新项目的历史记录
                  setSelectedTemplate(null);
                  setStreamingOutput('');
                  loadProjectHistory(project.id);
                  logger.log('项目切换', { 
                    projectId: project.id,
                    projectName: project.name,
                    location: '项目选择器组件:行号293'
                  });
                }}
                className={`p-4 rounded-lg border ${
                  currentProject?.id === project.id
                    ? 'border-indigo-500 bg-indigo-50'
                    : 'border-gray-200 hover:border-indigo-300'
                }`}
              >
                <div className="flex flex-col h-full">
                  <div className="flex items-start space-x-3">
                    <FolderOpen className={`w-5 h-5 ${
                      currentProject?.id === project.id
                        ? 'text-indigo-600'
                        : 'text-gray-400'
                    }`} />
                    <div className="flex-1 text-left">
                      <div className="flex items-center space-x-2">
                        <h3 className="font-medium text-gray-900">
                          {project.name}
                        </h3>
                        {project.is_default && (
                          <span className="px-2 py-0.5 text-xs bg-indigo-100 text-indigo-600 rounded">
                            {language === 'zh' ? '默认' : 'Default'}
                          </span>
                        )}
                      </div>
                      <p className="mt-1 text-sm text-gray-500 line-clamp-3">
                        {project.description}
                      </p>
                    </div>
                  </div>
                  {!project.is_default && (
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleSetDefault(project.id);
                      }}
                      className="mt-3 text-xs text-indigo-600 hover:text-indigo-700"
                    >
                      {language === 'zh' ? '设为默认' : 'Set as default'}
                    </button>
                  )}
                </div>
              </button>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default ProjectSelector;