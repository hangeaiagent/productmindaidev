import React, { useState, useEffect, useRef } from 'react';
import { Plus, FolderOpen, Save, Download, Play, AlertTriangle, RefreshCw } from 'lucide-react';
import { SafeLoader } from './SafeLoader';
import { stateManager } from '../utils/stateManager';
import { useAppContext } from '../context/AppContext'; 
import { supabase } from '../lib/supabase';
import { useAuth } from '../context/AuthContext';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { logger } from '../utils/logger';
import JSZip from 'jszip';
import * as marked from 'marked';
import { ErrorBoundaryProps, ErrorBoundaryState, GenerationState } from '../types/error-boundary';
import type { Project, TemplateVersion, Template } from '../types';
import { Document, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, WidthType, BorderStyle, Packer, AlignmentType } from 'docx';
import html2canvas from 'html2canvas';
import { jsPDF } from 'jspdf';
import { FunctionCaller } from '../utils/functionCaller';
import { translationService } from '../services/translationService';

// 转换 Markdown 为 Word 文档
const convertMarkdownToDocx = async (markdown: string): Promise<Document> => {
  try {
    logger.log('开始转换Markdown为Word', { contentLength: markdown.length });
    
    // 将 Markdown 转换为 HTML
    const htmlContent = String(marked.parse(markdown));
    logger.log('Markdown转换为HTML完成', { htmlLength: htmlContent.length });

    // 将 HTML 转换为文档段落
    const paragraphs = htmlContent
      .split('\n')
      .filter((line: string) => line.trim())
      .map((line: string) => {
        return new Paragraph({
          children: [
            new TextRun({
              text: line.replace(/<[^>]*>/g, ''), // 移除HTML标签
              size: 24,
            }),
          ],
        });
      });

    logger.log('HTML转换为段落完成', { paragraphsCount: paragraphs.length });

    // 创建一个新的文档，正确使用构造函数
    const doc = new Document({
      sections: [{
        properties: {},
        children: paragraphs
      }],
      creator: "ProductMind AI",
      description: "Generated by ProductMind AI",
      title: "ProductMind AI Document"
    });

    logger.log('Word文档创建完成');
    return doc;
  } catch (error) {
    logger.error('转换Markdown到Word失败', { error });
    throw error;
  }
};

interface VersionWithTemplate extends TemplateVersion {
  template?: {
    id: string;
    name_zh: string;
    name_en: string;
    category?: {
      id: string;
      name_zh: string;
      name_en: string;
    };
  };
}

// 改进的ErrorBoundary
class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    console.log('[ErrorBoundary] 捕获到错误，开始清理所有状态...');
    // 清理所有状态
    stateManager.cleanupAll();
    // 额外清理进度相关状态
    try {
      stateManager.clearState('generationState');
      stateManager.clearState('generationProgress');
      stateManager.clearState('currentGeneratingTemplate');
      stateManager.clearState('generationResults');
      console.log('[ErrorBoundary] 状态清理完成');
    } catch (e) {
      console.error('[ErrorBoundary] 清理状态时出错:', e);
    }
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
    logger.error('[ErrorBoundary] 组件错误详情', {
      error: error.message,
      componentStack: errorInfo.componentStack,
      errorStack: error.stack
    });
  }

  render(): React.ReactNode {
    if (this.state.hasError) {
      return (
        <div className="p-6 bg-green-50 border border-green-200 rounded-lg shadow-lg">
          <h3 className="text-green-600 font-medium mb-3 flex items-center">
            <AlertTriangle className="w-5 h-5 mr-2" />
            系统提示
          </h3>
          <p className="text-green-700 text-sm mb-4">
            由于异常退出，导致本地服务器错误，请手动清除浏览器缓存。
          </p>
          
          <div className="bg-orange-50 border border-orange-200 p-3 rounded mb-4">
            <p className="text-orange-700 text-sm">
              <strong>注意：</strong>因为上述情况，缺少进度提醒对话框，但不影响项目文档正常生成。
            </p>
          </div>
          
          <div className="bg-white bg-opacity-50 p-4 rounded-lg mb-4">
            <h4 className="text-green-600 font-medium mb-2">手动清除浏览器缓存的方法：</h4>
            <div className="text-green-700 text-sm space-y-2">
              <ol className="list-decimal list-inside space-y-1">
                <li className="font-medium">清理浏览器缓存：</li>
                <ul className="list-disc list-inside ml-4 space-y-1">
                  <li>打开浏览器的开发者工具（F12）</li>
                  <li>右键点击刷新按钮</li>
                  <li>选择"清空缓存并硬性重新加载"（Empty Cache and Hard Reload）</li>
                </ul>
              </ol>
              
              <div className="mt-4 text-sm">
                <p className="mb-2">详细操作说明：</p>
                <div className="space-y-1">
                  <a 
                    href="https://pangea.hisense.com/syma/clear-cache.html"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-green-600 hover:text-green-700 hover:underline block"
                  >
                    🔗 中文版操作说明
                  </a>
                  <a 
                    href="https://help.codehs.com/en/articles/4951972-how-to-clear-your-browser-cache-and-hard-refresh"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-green-600 hover:text-green-700 hover:underline block"
                  >
                    🔗 English Version Guide
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

interface GenerationResult {
  templateName: string;
  status: 'success' | 'failed';
  error?: string;
}

const ProjectSelector: React.FC = () => {
  const { 
    language, 
    currentProject, 
    setCurrentProject, 
    setSelectedTemplate,
    setStreamingOutput,
    loadProjectHistory,
    generateOutput
  } = useAppContext();
  
  const { user, isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  const projectId = searchParams.get('projectId');
  const [projects, setProjects] = useState<Project[]>([]);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [showDownloadOptions, setShowDownloadOptions] = useState(false);
  const [isGeneratingAll, setIsGeneratingAll] = useState(false);
  const [generationProgress, setGenerationProgress] = useState(0);
  const [totalTemplates, setTotalTemplates] = useState(0);
  const [showGenerationSummary, setShowGenerationSummary] = useState(false);
  const [generationResults, setGenerationResults] = useState<GenerationResult[]>([]);
  const [currentGenerating, setCurrentGenerating] = useState<string>('');
  const [nextToGenerate, setNextToGenerate] = useState<string>('');
  const mountedRef = useRef(true);

  // 组件卸载时清理
  useEffect(() => {
    console.log('[ProjectSelector] 组件挂载');
    mountedRef.current = true;
    
    return () => {
      console.log('[ProjectSelector] 组件卸载，开始清理...');
      mountedRef.current = false;
      // 清理所有定时器和异步操作
      stateManager.clearState('generationState');
      stateManager.clearState('generationProgress');
      stateManager.clearState('currentGeneratingTemplate');
      stateManager.clearState('generationResults');
      // 重置本地状态
      resetGenerationState();
      logger.debug('ProjectSelector unmounted and cleaned up', {
        trigger: 'component_unmount',
        timestamp: new Date().toISOString()
      });
    };
  }, []);

  // 初始化时清理遗留状态
  useEffect(() => {
    logger.debug('ProjectSelector initialized, cleaning legacy states', {
      trigger: 'component_init',
      timestamp: new Date().toISOString()
    });
    // 直接清理所有生成相关状态
    stateManager.clearState('generationState');
    stateManager.clearState('generationProgress');
    stateManager.clearState('currentGeneratingTemplate');
    stateManager.clearState('generationResults');
    resetGenerationState();
    
    // 检查是否有未完成的生成任务
    const savedState = stateManager.loadState<GenerationState>('generationState');
    if (savedState) {
      logger.debug('Found and cleaned legacy generation state', {
        state: savedState,
        trigger: 'state_cleanup',
        timestamp: new Date().toISOString()
      });
    }
  }, []);

  useEffect(() => {
    if (user) {
      loadProjects();
    }
  }, [user]);

  useEffect(() => {
    if (projects.length > 0) {
      // 如果URL中有projectId，选择对应项目
      if (projectId) {
        const project = projects.find(p => p.id === projectId);
        if (project) {
          setCurrentProject(project);
          return;
        }
      }
      
      // 否则选择默认项目，如果没有默认项目则选择第一个
      const defaultProject = projects.find(p => p.is_default) || projects[0];
      if (defaultProject) {
        setCurrentProject(defaultProject);
        setSearchParams({ projectId: defaultProject.id });
      }
    }
  }, [projects, projectId]);

  // 添加重置生成状态的函数
  const resetGenerationState = () => {
    console.log('[ProjectSelector] 重置生成状态...');
    setIsGeneratingAll(false);
    setGenerationProgress(0);
    setGenerationResults([]);
    setCurrentGenerating('');
    setNextToGenerate('');
    setTotalTemplates(0);
    console.log('[ProjectSelector] 生成状态重置完成');
  };

  const loadProjects = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      if (!user?.id) {
        setProjects([]);
        return;
      }
      
      const { data, error: fetchError } = await supabase
        .from('user_projects')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (fetchError) {
        throw new Error(language === 'zh' ? 
          '加载项目失败，请检查网络连接' : 
          'Failed to load projects, please check your network connection'
        );
      }
      
      setProjects(data || []);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 
        language === 'zh' ? '加载项目时发生错误' : 'Error loading projects';
      setError(errorMessage);
      console.error('加载项目失败:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleNewProject = () => {
    // 检查用户是否已登录
    if (!isAuthenticated) {
      navigate('/login');
      return;
    }

    setCurrentProject({
      id: '',
      name: '',
      description: '',
      user_id: user?.id || '',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    });
  };

  const handleSaveProject = async () => {
    // 检查用户是否已登录
    if (!isAuthenticated) {
      navigate('/login');
      return;
    }

    if (!currentProject?.name || !currentProject?.description) {
      setError(language === 'zh' ? '请填写项目名称和描述' : 'Please fill in project name and description');
      return;
    }

    setSaving(true);
    setError(null);

    try {
      logger.debug('开始保存项目（含自动翻译）', {
        projectId: currentProject.id,
        name: currentProject.name.substring(0, 50),
        description: currentProject.description?.substring(0, 100)
      });

      // 检测项目名称和描述的语言
      const [nameLanguage, descLanguage] = await Promise.all([
        translationService.detectLanguage(currentProject.name),
        translationService.detectLanguage(currentProject.description || '')
      ]);

      logger.debug('语言检测结果', {
        nameLanguage,
        descLanguage,
        name: currentProject.name.substring(0, 30),
        description: currentProject.description?.substring(0, 50)
      });

      // 确保语言一致性
      if (nameLanguage !== descLanguage) {
        throw new Error(language === 'zh' ? 
          '项目名称和描述的语言必须一致' : 
          'Project name and description must be in the same language'
        );
      }

      const sourceLang = nameLanguage;
      const targetLang = sourceLang === 'zh' ? 'en' : 'zh';

      // 自动翻译到另一种语言
      logger.debug('开始自动翻译', { sourceLang, targetLang });
      
      const [translatedName, translatedDesc] = await Promise.all([
        translationService.translate(currentProject.name, sourceLang, targetLang),
        currentProject.description ? 
          translationService.translate(currentProject.description, sourceLang, targetLang) : 
          Promise.resolve('')
      ]);

      logger.debug('翻译完成', {
        translatedName: translatedName.substring(0, 30),
        translatedDesc: translatedDesc.substring(0, 50)
      });

      // 准备数据库数据
      const projectData = {
        name: currentProject.name, // 保持兼容性
        description: currentProject.description || '', // 保持兼容性
        name_zh: sourceLang === 'zh' ? currentProject.name : translatedName,
        name_en: sourceLang === 'en' ? currentProject.name : translatedName,
        description_zh: sourceLang === 'zh' ? currentProject.description : translatedDesc,
        description_en: sourceLang === 'en' ? currentProject.description : translatedDesc,
        source_language: sourceLang,
        updated_at: new Date().toISOString()
      };

      logger.debug('准备保存项目数据', {
        sourceLang,
        hasNameZh: !!projectData.name_zh,
        hasNameEn: !!projectData.name_en,
        hasDescZh: !!projectData.description_zh,
        hasDescEn: !!projectData.description_en
      });

      if (currentProject.id) {
        // 更新现有项目
        const { error: updateError } = await supabase
          .from('user_projects')
          .update(projectData)
          .eq('id', currentProject.id);

        if (updateError) throw updateError;
        
        logger.debug('项目更新成功', { projectId: currentProject.id });
      } else {
        // 创建新项目
        const { data, error: insertError } = await supabase
          .from('user_projects')
          .insert({
            ...projectData,
            user_id: user?.id,
            is_default: false,
            is_open_source: false,
            model_locked: false
          })
          .select()
          .single();

        if (insertError) throw insertError;
        
        // 更新当前项目状态，包含多语言字段
        setCurrentProject({
          ...data,
          name_zh: projectData.name_zh,
          name_en: projectData.name_en,
          description_zh: projectData.description_zh,
          description_en: projectData.description_en,
          source_language: projectData.source_language
        });
        
        logger.debug('项目创建成功', { projectId: data.id });
      }
      
      await loadProjects();
      
      // 显示成功提示
      const successMessage = language === 'zh' ? 
        `项目保存成功！已自动生成${targetLang === 'zh' ? '中文' : '英文'}版本` :
        `Project saved successfully! ${targetLang === 'zh' ? 'Chinese' : 'English'} version auto-generated`;
        
      logger.log('项目保存完成（含翻译）', {
        projectId: currentProject.id,
        sourceLang,
        targetLang,
        message: successMessage
      });
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 
        language === 'zh' ? '保存项目失败' : 'Failed to save project';
      setError(errorMessage);
      
      logger.error('项目保存失败', {
        error: err,
        projectId: currentProject.id,
        message: errorMessage
      });
    } finally {
      setSaving(false);
    }
  };

  const handleSetDefault = async (projectId: string) => {
    try {
      logger.debug('Setting default project', { 
        projectId,
        trigger: 'user_action',
        timestamp: new Date().toISOString()
      });
      
      // 首先清空所有项目的默认标记
      await supabase
        .from('user_projects')
        .update({ is_default: false })
        .eq('user_id', user?.id);

      // 然后设置指定项目为默认
      const { error: updateError } = await supabase
        .from('user_projects')
        .update({ is_default: true })
        .eq('id', projectId);

      if (updateError) throw updateError;
      
      // 查找并设置当前项目为新的默认项目
      const targetProject = projects.find(p => p.id === projectId);
      if (targetProject) {
        setCurrentProject(targetProject);
        setSearchParams({ projectId: targetProject.id });
        logger.debug('Default project updated successfully', {
          projectId: targetProject.id,
          projectName: targetProject.name,
          trigger: 'default_project_set',
          timestamp: new Date().toISOString()
        });
      }
      
      // 清空错误提醒对话框
      setError(null);
      
      await loadProjects();
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 
        language === 'zh' ? '设置默认项目失败' : 'Failed to set default project';
      setError(errorMessage);
      logger.error('Failed to set default project', {
        error: err,
        projectId,
        trigger: 'default_project_error',
        timestamp: new Date().toISOString()
      });
    }
  };

  // 用于格式化输出内容的函数，与 OutputDisplay 中的逻辑相同
  const formatOutput = (text: string | null | undefined): string => {
    try {
      if (!text) return '';
      let textStr = String(text);
      
      // 检查是否已经是JSON对象
      if (typeof text === 'object') {
        try {
          const content = (text as any).content || text;
          return typeof content === 'string' ? content : JSON.stringify(content, null, 2);
        } catch (e) {
          return String(text);
        }
      }
      
      // 尝试解析JSON字符串
      try {
        if (textStr.trim().startsWith('{') || textStr.trim().startsWith('[')) {
          const jsonData = JSON.parse(textStr);
          if (jsonData.content) {
            return jsonData.content;
          }
          return JSON.stringify(jsonData, null, 2);
        }
      } catch {
        // 如果解析失败，返回原始文本
      }

      return textStr;
    } catch (e) {
      logger.error('格式化输出失败', e);
      return '';
    }
  };
  
  // 动态插入版权信息函数，与 OutputDisplay 中的逻辑相同
  const addCopyrightFooter = (content: string, format: string = 'md'): string => {
    // 根据当前语言选择版权信息
    const copyrightText = language === 'zh' ? 
      '本文件由 [ProductMind AI](https://productmindai.com) 生成' : 
      'Generated by [ProductMind AI](https://productmindai.com)';
    
    let footer = '';
    
    switch (format) {
      case 'md':
        footer = `

---
${copyrightText}
`;
        break;
      case 'docx':
        // Word 文件的版权信息会在后面单独处理
        footer = '';
        break;
      case 'pdf':
        // PDF 文件的版权信息会在后面单独处理
        footer = '';
        break;
      default:
        footer = `

---
${copyrightText}
`;
    }
    
    return content + footer;
  };

  const handleDownloadAll = async (format: 'md') => {
    if (!currentProject?.id) {
      setError(language === 'zh' ? '请先选择或创建一个项目' : 'Please select or create a project first');
      return;
    }

    setIsDownloading(true);
    setError(null);

    try {
      logger.log('开始下载项目内容', { projectId: currentProject.id, format });

      // 获取所有活跃的模板版本
      const { data: versions, error: versionsError } = await supabase
        .from('template_versions')
        .select(`
          *,
          template:templates (
            id,
            name_zh,
            name_en,
            category_id,
            category:template_categories (
              id,
              name_zh,
              name_en
            )
          )
        `)
        .eq('project_id', currentProject.id)
        .eq('is_active', true);

      if (versionsError) throw versionsError;

      if (!versions || versions.length === 0) {
        setError(language === 'zh' ? 
          '当前项目没有可下载的内容' : 
          'No content available to download'
        );
        return;
      }

      // 创建 ZIP 文件
      const zip = new JSZip();
      
      // 添加项目信息文件
      const readmeContent = `# ${currentProject.name || ''}\n\n${currentProject.description || ''}\n\n${language === 'zh' ? '生成时间' : 'Generated at'}：${new Date().toLocaleString()}`;
      zip.file('README.md', readmeContent);
      
      // 按分类组织文件
      const groupedVersions = (versions as VersionWithTemplate[]).reduce<Record<string, VersionWithTemplate[]>>((acc, version) => {
        const categoryName = language === 'zh' ? 
          (version.template?.category?.name_zh || '未分类') : 
          (version.template?.category?.name_en || 'Uncategorized');
        
        if (!acc[categoryName]) {
          acc[categoryName] = [];
        }
        acc[categoryName].push(version);
        return acc;
      }, {});

      // 添加文件到 ZIP
      for (const [category, categoryVersions] of Object.entries(groupedVersions)) {
        const folder = zip.folder(category);
        if (folder) {
          logger.log(`处理分类: ${category}`, { filesCount: categoryVersions.length });
          
          for (const version of categoryVersions) {
            const templateName = language === 'zh' ? 
              (version.template?.name_zh || 'unnamed') : 
              (version.template?.name_en || 'unnamed');
            
            // 使用安全的文件名
            const safeTemplateName = templateName
              .replace(/[<>:"/\\|?*]/g, '')  // 移除不安全的字符
              .replace(/\s+/g, '_');         // 空格替换为下划线
            
            const fileName = `${safeTemplateName}_V${version.version_number}.${format}`;
            logger.log(`处理文件: ${fileName}`, { templateId: version.template_id });
            
            // 格式化内容
            let rawContent = typeof version.output_content === 'string' 
              ? version.output_content 
              : JSON.stringify(version.output_content, null, 2);
            
            const formattedContent = formatOutput(rawContent);
            logger.log('内容格式化完成', { contentLength: formattedContent.length });

            try {
              // 添加Markdown格式的版权信息
              const contentWithFooter = addCopyrightFooter(formattedContent, 'md');
              folder.file(fileName, contentWithFooter);
              logger.log('Markdown文件添加完成', { fileName });
            } catch (fileError) {
              logger.error(`处理文件${fileName}失败`, {
                error: fileError,
                format,
                templateName,
                message: fileError instanceof Error ? fileError.message : '未知错误',
                stack: fileError instanceof Error ? fileError.stack : undefined
              });
              
              // 添加错误信息文件
              const errorContent = `处理此文件时出错: ${fileError instanceof Error ? fileError.message : '未知错误'}\n\n原始内容:\n${formattedContent}`;
              folder.file(`${fileName}.error.txt`, errorContent);
            }
          }
        }
      }

      // 生成并下载 ZIP 文件
      const content = await zip.generateAsync({ type: 'blob' });
      
      // 使用安全的项目名称作为文件名
      const safeProjectName = currentProject.name
        .replace(/[<>:"/\\|?*]/g, '')
        .replace(/\s+/g, '_');
      
      const formatName = format.toUpperCase();
      const downloadUrl = URL.createObjectURL(content);
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = `${safeProjectName}_${formatName}_${new Date().toISOString().slice(0, 10)}.zip`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(downloadUrl);

      logger.log('文件下载完成', { projectName: currentProject.name, format, filesCount: versions.length });
      setShowDownloadOptions(false);
    } catch (err) {
      logger.error('下载失败', { 
        error: err, 
        message: err instanceof Error ? err.message : '未知错误',
        stack: err instanceof Error ? err.stack : undefined 
      });
      const errorMessage = err instanceof Error ? err.message : 
        language === 'zh' ? '下载失败' : 'Download failed';
      setError(errorMessage);
    } finally {
      setIsDownloading(false);
    }
    
    setTimeout(() => {
      setError(null);
    }, 3000);
  };

  const handleGenerateAll = async () => {
    console.log('[ProjectSelector] 开始批量生成流程...');
    
    // 检查用户是否已登录
    if (!isAuthenticated) {
      console.log('[ProjectSelector] 用户未登录，跳转到登录页面');
      navigate('/login');
      return;
    }

    // 检查是否有项目
    if (!currentProject || !currentProject.id) {
      console.log('[ProjectSelector] 未选择项目');
      setError(language === 'zh' ? '请先创建并保存项目' : 'Please create and save a project first');
      return;
    }

    // 检查是否有产品描述
    if (!currentProject?.description) {
      console.log('[ProjectSelector] 项目无描述');
      setError(language === 'zh' ? '请先输入产品描述' : 'Please enter product description first');
      return;
    }

    try {
      console.log('[ProjectSelector] 清理旧的生成状态...');
      // 先清理旧的状态
      stateManager.clearState('generationState');
      stateManager.clearState('generationProgress');
      stateManager.clearState('currentGeneratingTemplate');
      stateManager.clearState('generationResults');
      
      // 保存初始状态
      const initialState = {
        isGeneratingAll: true,
        generationProgress: 0,
        currentGenerating: '',
        nextToGenerate: '',
        projectId: currentProject.id
      };
      stateManager.saveState('generationState', initialState);

      logger.log('[ProjectSelector] 开始批量生成', {
        projectId: currentProject.id,
        projectName: currentProject.name,
        state: initialState
      });

      // 重置所有状态
      setIsGeneratingAll(true);
      setGenerationProgress(0);
      setGenerationResults([]);
      setCurrentGenerating('');
      setNextToGenerate('');
      setError(null);

      // 清理未完成的生成任务
      const { data: unfinishedVersions, error: cleanupError } = await supabase
        .from('template_versions')
        .select('*')
        .eq('project_id', currentProject.id)
        .eq('is_active', true)
        .is('output_content', null);

      if (cleanupError) throw cleanupError;

      if (unfinishedVersions && unfinishedVersions.length > 0) {
        console.log('[ProjectSelector] 清理未完成的生成任务', {
          projectId: currentProject.id,
          versionsCount: unfinishedVersions.length
        });

        const { error: deleteError } = await supabase
          .from('template_versions')
          .delete()
          .in('id', unfinishedVersions.map(v => v.id));

        if (deleteError) throw deleteError;
      }

      // 获取所有模板，包括分类信息
      const { data: sortedTemplates, error: templatesError } = await supabase
        .from('templates')
        .select(`
          *,
          category:template_categories!inner (
            id,
            name_zh,
            name_en,
            no
          ),
          versions:template_versions (
            id,
            project_id,
            is_active,
            output_content
          )
        `)
        .order('category(no)', { ascending: true })
        .order('no', { ascending: true });

      if (templatesError) throw templatesError;

      // 筛选出没有完成生成的模板
      const templatesToGenerate = sortedTemplates?.filter(template => {
        const hasCompletedVersion = template.versions?.some(
          (version: { project_id: string; is_active: boolean; output_content: any }) => 
            version.project_id === currentProject.id && 
            version.is_active && 
            version.output_content !== null
        );
        return !hasCompletedVersion;
      });

      console.log('[ProjectSelector] 获取待生成模板', {
        totalTemplates: templatesToGenerate?.length,
        templates: templatesToGenerate?.map(t => ({
          id: t.id,
          name: language === 'zh' ? t.name_zh : t.name_en
        }))
      });

      if (!templatesToGenerate?.length) {
        console.log('[ProjectSelector] 没有需要生成的模板');
        setError(language === 'zh' ? '没有需要生成的模板' : 'No templates to generate');
        setIsGeneratingAll(false);
        // 清理状态
        stateManager.clearState('generationState');
        return;
      }

      setTotalTemplates(templatesToGenerate.length);

      // 逐个生成模板
      for (let i = 0; i < templatesToGenerate.length; i++) {
        // 检查组件是否已卸载
        if (!mountedRef.current) {
          console.log('[ProjectSelector] 组件已卸载，停止生成');
          break;
        }
        
        const template = templatesToGenerate[i];
        const templateName = language === 'zh' ? template.name_zh : template.name_en;

        console.log(`[ProjectSelector] 生成模板 ${i + 1}/${templatesToGenerate.length}: ${templateName}`);

        const currentState: GenerationState = {
          isGeneratingAll: true,
          generationProgress: (i / templatesToGenerate.length) * 100,
          currentGenerating: templateName,
          nextToGenerate: i < templatesToGenerate.length - 1 ? 
            (language === 'zh' ? templatesToGenerate[i + 1].name_zh : templatesToGenerate[i + 1].name_en) : '',
          projectId: currentProject.id
        };
        stateManager.saveState('generationState', currentState);

        try {
          await generateOutput(currentProject.description, template);
          
          setGenerationResults(prev => {
            const newResults: GenerationResult[] = [...prev, { 
              templateName, 
              status: 'success' as const 
            }];
            stateManager.saveState('generationState', {
              ...currentState,
              results: newResults
            });
            return newResults;
          });
          console.log(`[ProjectSelector] 模板生成成功: ${templateName}`);
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          console.error(`[ProjectSelector] 模板生成失败: ${templateName}`, errorMessage);
          
          setGenerationResults(prev => {
            const newResults: GenerationResult[] = [...prev, { 
              templateName, 
              status: 'failed' as const,
              error: errorMessage 
            }];
            stateManager.saveState('generationState', {
              ...currentState,
              results: newResults
            });
            return newResults;
          });

          if (error instanceof Error && 
            (error.message.includes('API') || 
             error.message.includes('network') || 
             error.message.includes('authorization'))) {
            console.log('[ProjectSelector] 遇到严重错误，停止生成');
            break;
          }
        }

        setGenerationProgress((i + 1) / templatesToGenerate.length * 100);
      }

      console.log('[ProjectSelector] 批量生成完成，清理状态...');
      // 清理所有生成状态
      stateManager.clearState('generationState');
      stateManager.clearState('generationProgress');
      stateManager.clearState('currentGeneratingTemplate');
      stateManager.clearState('generationResults');
      
      setShowGenerationSummary(true);
    } catch (error) {
      console.error('[ProjectSelector] 批量生成过程发生错误', {
        error: error instanceof Error ? error.message : String(error),
        state: {
          isGeneratingAll,
          generationProgress,
          currentGenerating,
          nextToGenerate,
          results: generationResults
        }
      });
      
      setError(error instanceof Error ? error.message : 
        language === 'zh' ? '生成过程中发生错误' : 'Error during generation'
      );
    } finally {
      console.log('[ProjectSelector] 批量生成结束，执行最终清理...');
      setIsGeneratingAll(false);
      setCurrentGenerating('');
      setNextToGenerate('');
      // 确保清理所有状态
      stateManager.clearState('generationState');
      stateManager.clearState('generationProgress');
      stateManager.clearState('currentGeneratingTemplate');
      stateManager.clearState('generationResults');
      console.log('[ProjectSelector] 清理完成');
    }
  };

  // 添加生成结果摘要对话框
  const GenerationSummaryDialog = () => {
    if (!showGenerationSummary) return null;

    const successCount = generationResults.filter(r => r.status === 'success').length;
    const failedCount = generationResults.filter(r => r.status === 'failed').length;

    const handleClose = async () => {
      console.log('[GenerationSummaryDialog] 关闭摘要对话框，清理状态...');
      setShowGenerationSummary(false);
      setGenerationResults([]);
      
      // 清理所有生成相关的本地存储
      stateManager.clearState('generationState');
      stateManager.clearState('generationProgress');
      stateManager.clearState('currentGeneratingTemplate');
      stateManager.clearState('generationResults');
      
      // 重新加载项目历史
      if (currentProject?.id) {
        console.log('[GenerationSummaryDialog] 重新加载项目历史...');
        await loadProjectHistory(currentProject.id);
      }
      
      // 通知 AppContext 刷新模板列表
      setSelectedTemplate(null);
      setStreamingOutput('');
      console.log('[GenerationSummaryDialog] 状态清理完成');
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto">
          <h3 className="text-lg font-semibold mb-4">
            {language === 'zh' ? '生成结果摘要' : 'Generation Summary'}
          </h3>
          
          <div className="mb-4 grid grid-cols-2 gap-4">
            <div className="bg-green-100 dark:bg-green-900 p-3 rounded">
              <div className="text-green-800 dark:text-green-200">
                {language === 'zh' ? '成功' : 'Success'}: {successCount}
              </div>
            </div>
            <div className="bg-red-100 dark:bg-red-900 p-3 rounded">
              <div className="text-red-800 dark:text-red-200">
                {language === 'zh' ? '失败' : 'Failed'}: {failedCount}
              </div>
            </div>
          </div>

          <div className="space-y-3">
            {generationResults.map((result, index) => (
              <div 
                key={index}
                className={`p-3 rounded ${
                  result.status === 'success' 
                    ? 'bg-green-50 dark:bg-green-900/20' 
                    : 'bg-red-50 dark:bg-red-900/20'
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="font-medium">{result.templateName}</div>
                    {result.error && (
                      <div className="text-sm text-red-600 dark:text-red-400 mt-1">
                        {result.error}
                      </div>
                    )}
                  </div>
                  <div className={`ml-3 ${
                    result.status === 'success' 
                      ? 'text-green-600 dark:text-green-400' 
                      : 'text-red-600 dark:text-red-400'
                  }`}>
                    {result.status === 'success' 
                      ? (language === 'zh' ? '成功' : 'Success')
                      : (language === 'zh' ? '失败' : 'Failed')
                    }
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="mt-6 flex justify-end">
            <button
              onClick={handleClose}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
            >
              {language === 'zh' ? '关闭' : 'Close'}
            </button>
          </div>
        </div>
      </div>
    );
  };

  // 修改生成进度对话框组件
  const GenerationProgressDialog = () => {
    // 只在主动点击生成按钮后显示进度框
    if (!isGeneratingAll) return null;

    return (
      <div className="fixed bottom-4 right-4 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 max-w-md">
        <div className="space-y-3">
          <div className="flex justify-between items-center">
            <div className="text-lg font-medium text-gray-700 dark:text-gray-300">
              {language === 'zh' ? '生成进度' : 'Generation Progress'}
            </div>
          </div>

          {currentGenerating && (
            <div>
              <div className="text-sm font-medium text-gray-700 dark:text-gray-300">
                {language === 'zh' ? '当前生成' : 'Currently Generating'}:
                <span className="ml-1 text-blue-600 dark:text-blue-400">{currentGenerating}</span>
              </div>
              {nextToGenerate && (
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  {language === 'zh' ? '下一个' : 'Next'}:
                  <span className="ml-1">{nextToGenerate}</span>
                </div>
              )}
            </div>
          )}

          <div>
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-1">
              {language === 'zh' ? '进度' : 'Progress'}: {Math.round(generationProgress)}%
            </div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${generationProgress}%` }}
              />
            </div>
            <div className="text-xs text-gray-500 dark:text-gray-400 mt-1 text-right">
              {generationResults.length} / {totalTemplates} {language === 'zh' ? '已完成' : 'completed'}
            </div>
          </div>

          {/* 最近完成的项目列表 */}
          {generationResults.length > 0 && (
            <div className="mt-2">
              <div className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {language === 'zh' ? '最近完成' : 'Recently Completed'}:
              </div>
              <div className="max-h-32 overflow-y-auto">
                {generationResults.slice(-3).map((result, index) => (
                  <div 
                    key={index}
                    className={`text-sm ${
                      result.status === 'success' 
                        ? 'text-green-600 dark:text-green-400' 
                        : 'text-red-600 dark:text-red-400'
                    }`}
                  >
                    {result.templateName}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <ErrorBoundary>
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="mb-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-gray-800">
              {language === 'zh' ? '项目信息' : 'Project Information'}
            </h2>
            <div className="flex space-x-2">
              <button
                onClick={() => {
                  if (!isAuthenticated) {
                    navigate('/login');
                    return;
                  }
                  handleNewProject();
                }}
                className="px-3 py-1.5 text-sm font-medium text-indigo-600 bg-indigo-50 rounded hover:bg-indigo-100"
              >
                <Plus className="w-4 h-4 inline-block mr-1" />
                {language === 'zh' ? '新建' : 'New'}
              </button>
              <div className="relative">
                <button
                  onClick={() => {
                    if (!isAuthenticated) {
                      navigate('/login');
                      return;
                    }
                    setShowDownloadOptions(!showDownloadOptions);
                  }}
                  disabled={isDownloading}
                  className={`px-3 py-1.5 text-sm font-medium rounded ${
                    isDownloading
                      ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                      : 'text-indigo-600 bg-indigo-50 hover:bg-indigo-100'
                  }`}
                >
                  {isDownloading ? (
                    <>
                      <SafeLoader className="w-4 h-4 inline-block mr-1 animate-spin" />
                      {language === 'zh' ? '下载中...' : 'Downloading...'}
                    </>
                  ) : (
                    <>
                      <Download className="w-4 h-4 inline-block mr-1" />
                      {language === 'zh' ? '全部下载' : 'Download All'}
                    </>
                  )}
                </button>
                
                {showDownloadOptions && !isDownloading && (
                  <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 z-10">
                    <div className="py-1" role="menu" aria-orientation="vertical">
                      <button
                        onClick={() => handleDownloadAll('md')}
                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                        role="menuitem"
                      >
                        {language === 'zh' ? '全部下载 Markdown' : 'Download All Markdown'}
                      </button>
                    </div>
                  </div>
                )}
              </div>
              <button
                onClick={() => {
                  if (!isAuthenticated) {
                    navigate('/login');
                    return;
                  }
                  handleSaveProject();
                }}
                disabled={saving || !currentProject?.name}
                className={`px-3 py-1.5 text-sm font-medium rounded ${
                  saving || !currentProject?.name
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : 'text-white bg-indigo-600 hover:bg-indigo-700'
                }`}
              >
                {saving ? (
                  <>
                    <SafeLoader className="w-4 h-4 inline-block mr-1 animate-spin" />
                    {language === 'zh' ? '保存中...' : 'Saving...'}
                  </>
                ) : (
                  <>
                    <Save className="w-4 h-4 inline-block mr-1" />
                    {language === 'zh' ? '保存' : 'Save'}
                  </>
                )}
              </button>
            </div>
          </div>

          {error && (
            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-sm text-red-600">{error}</p>
            </div>
          )}

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {language === 'zh' ? '项目名称' : 'Project Name'}
              </label>
              <input
                type="text"
                value={currentProject?.name || ''}
                onChange={async (e) => {
                  const value = e.target.value;
                  setCurrentProject(prev => prev ? {
                    ...prev,
                    name: value
                  } : null);
                }}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                placeholder={language === 'zh' ? '项目名称' : 'Project Name'}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {language === 'zh' ? '产品概述' : 'Product Overview'}
              </label>
              <div className="relative">
                <textarea
                  value={currentProject?.description || ''}
                  onChange={(e) => {
                    const value = e.target.value;
                    setCurrentProject(prev => prev ? {
                      ...prev,
                      description: value
                    } : null);
                  }}
                  rows={4}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder={language === 'zh' ? 
                    '请用一句话描述您的产品概念（例如：开发一个帮助用户管理日常任务的应用）' : 
                    'Describe your product concept in one sentence'
                  }
                  required
                />
                <p className="mt-2 text-sm text-gray-500">
                  {language === 'zh'
                    ? '简单描述您的产品理念，我们将帮助您进行深入分析'
                    : 'Briefly describe your product concept, and we will help you analyze it in depth'
                  }
                </p>
              </div>
            </div>
          </div>
        </div>

        <div className="mt-8">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            {language === 'zh' ? '我的项目' : 'My Projects'}
          </h3>
          {isLoading ? (
            <div className="flex items-center justify-center py-8">
              <SafeLoader className="w-6 h-6 text-indigo-600 animate-spin" />
              <span className="ml-2 text-gray-600">
                {language === 'zh' ? '加载中...' : 'Loading...'}
              </span>
            </div>
          ) : (
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
              {projects.map((project) => (
                <button
                  key={project.id}
                  onClick={() => {
                    setCurrentProject(project);
                    setSearchParams({ projectId: project.id });
                    // 清空当前选中的模板和输出内容，加载新项目的历史记录
                    setSelectedTemplate(null);
                    setStreamingOutput('');
                    // 清空错误提醒对话框
                    setError(null);
                    loadProjectHistory(project.id);
                    logger.log('项目切换', { 
                      projectId: project.id,
                      projectName: project.name,
                      location: '项目选择器组件:行号293'
                    });
                  }}
                  className={`p-4 rounded-lg border ${
                    currentProject?.id === project.id
                      ? 'border-indigo-500 bg-indigo-50'
                      : 'border-gray-200 hover:border-indigo-300'
                  }`}
                >
                  <div className="flex flex-col h-full">
                    <div className="flex items-start space-x-3">
                      <FolderOpen className={`w-5 h-5 ${
                        currentProject?.id === project.id
                          ? 'text-indigo-600'
                          : 'text-gray-400'
                      }`} />
                      <div className="flex-1 text-left">
                        <div className="flex items-center space-x-2">
                                            <h3 className="font-medium text-gray-900">
                    {language === 'zh' ? (project.name_zh || project.name) : (project.name_en || project.name)}
                  </h3>
                  {project.is_default && (
                    <span className="px-2 py-0.5 text-xs bg-indigo-100 text-indigo-600 rounded">
                      {language === 'zh' ? '默认' : 'Default'}
                    </span>
                  )}
                </div>
                <p className="mt-1 text-sm text-gray-500 line-clamp-3">
                  {language === 'zh' ? (project.description_zh || project.description) : (project.description_en || project.description)}
                </p>
                      </div>
                    </div>
                    {!project.is_default && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleSetDefault(project.id);
                        }}
                        className="mt-3 text-xs text-indigo-600 hover:text-indigo-700"
                      >
                        {language === 'zh' ? '设为默认' : 'Set as default'}
                      </button>
                    )}
                  </div>
                </button>
              ))}
            </div>
          )}
        </div>

        <div className="flex justify-between items-center mt-4">
          <div className="flex space-x-2">
            <button
              onClick={() => {
                if (!isAuthenticated) {
                  navigate('/login');
                  return;
                }
                handleNewProject();
              }}
              className="flex items-center px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              <Plus className="w-4 h-4 mr-2" />
              {language === 'zh' ? '新建项目' : 'New Project'}
            </button>
            
            <button
              onClick={() => {
                if (!isAuthenticated) {
                  navigate('/login');
                  return;
                }
                handleGenerateAll();
              }}
              disabled={isGeneratingAll || !currentProject?.id}
              className={`flex items-center px-3 py-2 ${
                isGeneratingAll || !currentProject?.id
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-green-500 hover:bg-green-600'
              } text-white rounded`}
            >
                          {isGeneratingAll ? (
              <>
                <SafeLoader className="w-4 h-4 mr-2 animate-spin" />
                {language === 'zh' 
                  ? `生成中 (${generationResults.length}/${totalTemplates})`
                  : `Generating (${generationResults.length}/${totalTemplates})`
                }
              </>
            ) : (
              <>
                <Play className="w-4 h-4 mr-2" />
                {language === 'zh' ? '全部生成' : 'Generate All'}
              </>
            )}
            </button>
          </div>
        </div>

        {/* 添加生成进度提示 */}
        {isGeneratingAll && (
          <GenerationProgressDialog />
        )}
        
        {/* 添加生成结果摘要对话框 */}
        <GenerationSummaryDialog />
      </div>
    </ErrorBoundary>
  );
};

export default ProjectSelector;