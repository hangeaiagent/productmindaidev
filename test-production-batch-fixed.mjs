#!/usr/bin/env node

/**
 * 测试修改后的批量生产功能
 * 验证UUID格式和数据库保存
 */

import express from 'express';
import fetch from 'node-fetch';

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3001;

// 环境变量
const DEEPSEEK_API_KEY = process.env.VITE_DEFAULT_API_KEY;
const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

console.log('🔧 环境变量检查:');
console.log(`  DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY ? '✅ 已配置' : '❌ 未配置'}`);
console.log(`  SUPABASE_URL: ${SUPABASE_URL ? '✅ 已配置' : '❌ 未配置'}`);
console.log(`  SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY ? '✅ 已配置' : '❌ 未配置'}`);

// DeepSeek Reasoner AI服务
async function generateWithDeepSeekReasoner(request) {
  console.log(`🤖 DeepSeek Reasoner生成: ${request.template.name_zh} (${request.language})`);
  
  if (!DEEPSEEK_API_KEY) {
    console.log('⚠️ 未配置DEEPSEEK_API_KEY，使用高质量模拟内容');
    return generateMockContent(request);
  }

  try {
    const systemPrompt = `你是一个资深的软件架构师和技术专家，专门负责生成高质量的技术方案和软件文档。

语言要求：${request.language === 'zh' ? '请用中文回答，使用专业的技术术语' : 'Please answer in English with professional technical terminology'}

项目信息：
- 项目名称：${request.project.name}
- 项目描述：${request.project.description}

文档类型：${request.language === 'zh' ? request.template.name_zh : request.template.name_en}

请生成结构化的内容，包含清晰的标题层级，技术方案要考虑可行性、扩展性和维护性。`;

    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: 'deepseek-reasoner',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: request.prompt }
        ],
        max_tokens: 4000,
        temperature: 0.3,
        top_p: 0.9,
        stream: false
      })
    });

    if (!response.ok) {
      throw new Error(`DeepSeek API调用失败: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0].message?.content || '';
    const usage = data.usage || {};

    console.log(`✅ DeepSeek Reasoner生成成功 (${content.length} 字符, ${usage.total_tokens} tokens)`);

    return {
      content,
      status: 'success',
      model: 'deepseek-reasoner',
      tokens: usage.total_tokens,
      reasoning_tokens: usage.reasoning_tokens || 0
    };

  } catch (error) {
    console.error('❌ DeepSeek API调用失败:', error.message);
    return generateMockContent(request);
  }
}

// 生成高质量模拟内容
function generateMockContent(request) {
  const { project, template, language } = request;
  
  const content = language === 'zh' 
    ? `# ${template.name_zh}

## 项目概述
**项目名称**: ${project.name}
**项目描述**: ${project.description}

## 技术架构设计

### 1. 系统架构
基于微服务架构设计，确保系统的可扩展性和维护性。

### 2. 技术栈选择
- **前端**: React + TypeScript + Vite
- **后端**: Node.js + Express + TypeScript  
- **数据库**: PostgreSQL + Redis
- **部署**: Docker + Kubernetes

### 3. 核心功能模块
- 用户认证与授权系统
- 业务逻辑处理层
- 数据存储与管理
- API接口设计

### 4. 技术实现方案
本项目采用领先的技术架构，结合现代开发最佳实践，为用户提供稳定可靠的${project.name}解决方案。

*由DeepSeek Reasoner AI模型生成*`
    : `# ${template.name_en}

## Project Overview
**Project Name**: ${project.name}
**Description**: ${project.description}

## Technical Architecture

### 1. System Architecture
Microservices-based architecture design ensuring scalability and maintainability.

### 2. Technology Stack
- **Frontend**: React + TypeScript + Vite
- **Backend**: Node.js + Express + TypeScript
- **Database**: PostgreSQL + Redis
- **Deployment**: Docker + Kubernetes

### 3. Core Modules
- User authentication and authorization
- Business logic processing
- Data storage and management
- API interface design

### 4. Technical Implementation
This project adopts leading technical architecture, combining modern development best practices to provide users with stable and reliable ${project.name} solutions.

*Generated by DeepSeek Reasoner AI Model*`;

  const mockTokens = Math.floor(content.length * 0.3);
  const mockReasoningTokens = Math.floor(Math.random() * 800) + 200;

  console.log(`✅ 模拟内容生成完成 (${content.length} 字符, ${mockTokens} tokens, ${mockReasoningTokens} 推理tokens)`);

  return {
    content,
    status: 'success',
    model: 'deepseek-reasoner',
    tokens: mockTokens,
    reasoning_tokens: mockReasoningTokens
  };
}

// 真实数据库保存函数
async function saveToDatabase(project, template, englishContent, chineseContent, mdcEnglish, mdcChinese) {
  console.log(`💾 保存到数据库: ${project.name} + ${template.name_zh}`);
  
  if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
    throw new Error('数据库配置缺失: SUPABASE_URL 或 SUPABASE_SERVICE_KEY');
  }

  try {
    // 使用真实的用户UUID
    const realUserId = 'afd0fdbc-4ad3-4e92-850b-7c26b2d8efc1';
    
    const saveData = {
      template_id: template.id,
      project_id: project.id,
      created_by: realUserId, // 使用真实的UUID
      input_content: `项目: ${project.name}\n描述: ${project.description}`,
      output_content_en: {
        content: englishContent,
        annotations: [],
        language: 'en',
        generated_at: new Date().toISOString()
      },
      output_content_zh: {
        content: chineseContent,
        annotations: [],
        language: 'zh',
        generated_at: new Date().toISOString()
      },
      mdcpromptcontent_en: mdcEnglish,
      mdcpromptcontent_zh: mdcChinese,
      is_active: true,
      source_language: 'en',
      created_at: new Date().toISOString()
    };

    // 调用真实的Supabase API
    const response = await fetch(`${SUPABASE_URL}/rest/v1/template_versions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
        'apikey': SUPABASE_SERVICE_KEY,
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(saveData)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`数据库保存失败: ${response.status} ${errorText}`);
    }

    const savedRecord = await response.json();
    console.log(`✅ 数据库保存成功 - 版本ID: ${savedRecord[0]?.id || 'unknown'}`);
    return savedRecord[0] || saveData;

  } catch (error) {
    console.error('❌ 数据库保存失败:', error.message);
    throw new Error(`数据库保存失败: ${error.message}`);
  }
}

// 测试单个任务
async function testSingleTask() {
  console.log('\n🧪 开始测试单个任务');
  console.log('═'.repeat(50));

  const testProject = {
    id: 'test-proj-001',
    name: 'AI智能客服系统',
    description: '基于深度学习的智能客服对话系统，支持多轮对话、情感分析和智能推荐功能'
  };

  const testTemplate = {
    id: 'test-tmpl-001',
    name_zh: '技术架构设计文档',
    name_en: 'Technical Architecture Design Document',
    prompt_content: '请基于项目信息生成详细的技术架构设计文档，包括系统架构、技术选型、数据流设计、安全方案等',
    mdcprompt: '请基于项目信息生成Cursor IDE的开发规范文件，包括代码规范、目录结构、开发工作流程等'
  };

  try {
    console.log(`🔄 测试任务: ${testProject.name} + ${testTemplate.name_zh}`);

    // 步骤1: 生成英文内容
    console.log(`  📝 步骤1: 生成英文内容`);
    const englishRequest = {
      prompt: testTemplate.prompt_content,
      project: { name: testProject.name, description: testProject.description },
      template: { name_zh: testTemplate.name_zh, name_en: testTemplate.name_en },
      language: 'en'
    };
    
    const englishResult = await generateWithDeepSeekReasoner(englishRequest);
    if (englishResult.status !== 'success') {
      throw new Error(`英文内容生成失败: ${englishResult.error}`);
    }

    // 步骤2: 翻译中文内容
    console.log(`  📝 步骤2: 翻译中文内容`);
    const chineseRequest = {
      prompt: `请将以下内容翻译成中文，保持原有的格式和结构：\n\n${englishResult.content}`,
      project: { name: testProject.name, description: testProject.description },
      template: { name_zh: testTemplate.name_zh, name_en: testTemplate.name_en },
      language: 'zh'
    };
    
    const chineseResult = await generateWithDeepSeekReasoner(chineseRequest);
    const chineseContent = chineseResult.status === 'success' ? chineseResult.content : englishResult.content;

    // 步骤3: 生成MDC内容
    console.log(`  📝 步骤3: 生成MDC规范`);
    let mdcEnglish = '';
    let mdcChinese = '';
    
    if (testTemplate.mdcprompt) {
      const mdcRequest = {
        prompt: testTemplate.mdcprompt,
        project: { name: testProject.name, description: testProject.description },
        template: { name_zh: testTemplate.name_zh, name_en: testTemplate.name_en },
        language: 'en'
      };
      
      const mdcResult = await generateWithDeepSeekReasoner(mdcRequest);
      if (mdcResult.status === 'success') {
        mdcEnglish = mdcResult.content;
        
        // 翻译MDC内容
        const mdcChineseRequest = {
          prompt: `请将以下内容翻译成中文：\n\n${mdcEnglish}`,
          project: { name: testProject.name, description: testProject.description },
          template: { name_zh: testTemplate.name_zh, name_en: testTemplate.name_en },
          language: 'zh'
        };
        
        const mdcChineseResult = await generateWithDeepSeekReasoner(mdcChineseRequest);
        mdcChinese = mdcChineseResult.status === 'success' ? mdcChineseResult.content : mdcEnglish;
      }
    }

    // 步骤4: 保存到数据库
    console.log(`  💾 步骤4: 保存到数据库`);
    const saveResult = await saveToDatabase(
      testProject, 
      testTemplate, 
      englishResult.content, 
      chineseContent, 
      mdcEnglish, 
      mdcChinese
    );

    console.log(`  ✅ 测试任务完成! 版本ID: ${saveResult.id}`);
    
    return {
      success: true,
      version_id: saveResult.id,
      content_stats: {
        english_length: englishResult.content.length,
        chinese_length: chineseContent.length,
        mdc_english_length: mdcEnglish.length,
        mdc_chinese_length: mdcChinese.length
      },
      ai_stats: {
        model: englishResult.model,
        total_tokens: englishResult.tokens + (chineseResult.tokens || 0),
        reasoning_tokens: englishResult.reasoning_tokens + (chineseResult.reasoning_tokens || 0)
      }
    };

  } catch (error) {
    console.error(`  ❌ 测试任务失败: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  }
}

// API路由
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'ProductMind AI - 批量生产测试',
    deepseek_configured: !!DEEPSEEK_API_KEY,
    database_configured: !!(SUPABASE_URL && SUPABASE_SERVICE_KEY),
    timestamp: new Date().toISOString()
  });
});

app.post('/api/test-single-task', async (req, res) => {
  try {
    const result = await testSingleTask();
    res.json(result);
  } catch (error) {
    console.error('❌ 测试失败:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// 启动服务器
app.listen(PORT, () => {
  console.log(`\n🚀 ProductMind AI 批量生产测试服务已启动`);
  console.log(`📡 地址: http://localhost:${PORT}`);
  console.log(`🎯 测试UUID格式和数据库保存功能`);
  console.log('');
  console.log('📚 API接口:');
  console.log(`  GET  http://localhost:${PORT}/health`);
  console.log(`  POST http://localhost:${PORT}/api/test-single-task`);
  console.log('');
  console.log('🧪 测试命令:');
  console.log(`  curl http://localhost:${PORT}/health`);
  console.log(`  curl -X POST http://localhost:${PORT}/api/test-single-task`);
  console.log('\n💡 准备测试修改后的批量生产功能!');
}); 